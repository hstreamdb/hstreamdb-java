plugins {
    id 'java-library'
    id 'application'
    id 'com.google.protobuf' version '0.8.15'
    id 'idea'
    id 'maven-publish'
    id 'signing'
}

group = 'io.hstream'
version = '0.6.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testImplementation 'com.google.guava:guava:31.0.1-jre'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // grpc
    implementation 'io.grpc:grpc-netty-shaded:1.38.0'
    implementation 'io.grpc:grpc-protobuf:1.38.0'
    implementation 'io.grpc:grpc-stub:1.38.0'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for java 9+

    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.17.3'

    compileOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.14.1'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    api 'com.google.guava:guava:30.1.1-jre'

}

tasks.test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.12.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.38.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'hstreamdb-java'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'hstreamdb-java'
                description = 'Java client for HStreamDB'
                url = 'https://hstream.io'
                licenses {
                    license {
                        name = 'The 3-Clause BSD License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                developers {
                    developer {
                        id = 'daleiz'
                        name = 'Bin Wang'
                        email = 'wangbin@emqx.io'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/hstreamdb/hstreamdb-java.git'
                    developerConnection = 'scm:git:https://github.com/hstreamdb/hstreamdb-java.git'
                    url = 'https://github.com/hstreamdb/hstreamdb-java'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            // def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("OSSRH_USERNAME")
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("OSSRH_TOKEN")
            }
        }
    }
}

signing {
    if(project.hasProperty('signing.keyId')) {
      sign publishing.publications.mavenJava
    } else {
      def signingKey = System.getenv("OSSRH_GPG_SECRET_KEY")
      def signingPassword = System.getenv("OSSRH_GPG_PASSWORD")
      useInMemoryPgpKeys(signingKey, signingPassword)
      sign publishing.publications.mavenJava
    }
}


javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options {
        links = ['https://docs.oracle.com/en/java/javase/11/docs/api/', 'https://javadoc.io/doc/com.google.guava/guava/latest/']
    }

    exclude 'io/hstream/impl/**'
    exclude 'io/hstream/util/**'
}
